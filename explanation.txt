delete:
2 случая: 
    1. когда у удаляемого узла есть потомки --- меняем метку о том, что нет значения
    2. когда у удаляемого узла нет потомков:
        + у родителя удаляемого узла остался один потомок --- сжимаем суффикс "брата" с префиксом у родителя
        + у -||- осталось больше одного потомка --- просто удаляем удаляемый узел
*не забываем во втором случае удалить ребро, ведущее к удаяляемому узлу

lookup:
    делаем строчку из одного символа передаваемого ключа (на самом
    деле значения указателя на рассматриваемый символ ptrBegin), 
    если среди ключей в RBtree данного rtree-node нашлось вхождение,
    то еще несколько случаев:
     + если нашёлся ключ, который совпадает с искомым, то проверяем
        есть ли у значения по этому ключу марка ifNodeHasValue,
        если её нет, то возвращаем NULL, иначе наёденное value
     + найденный ключ является префиксом (подстрокой) того,
        что ищем, то увеличивием ptrBegin на длину найденного 
        детского ключа
     + если длина найденного ключа больше длины того, что
       ищем, то возвращаем NULL

insert:
    пу пу пу
    коротко:
        итерируемся по переданному ключу
            + если не нашёлся ни один ребёнок с нужным ключом, то 
            тупо добавляем новое ребро
            + если среди потомков найден ключ, который короче того,
            что ищем, то переходим к его потомку и итератор по
            переданному ключу переставляем на длину найденного узла
            + если найденый ключ длиннее того, что ищем, то разбиваем 
            найденный узел
            + есть общий префикс - находим длину этого общего префикса
            и переходим дальше
     